function evaRslt = CalcEvaRslt(dataMatLnk, codeMatDtb, codeMatQry, paraStr)
% INTRO
%   evaluate binary codes generated by the hashing model
% INPUT
%   dataMatLnk: K x N_Q (ground-truth matches)
%   codeMatDtb: R x N_D (binary codes of database samples)
%   codeMatQry: R x N_Q (binary codes of query samples)
%   paraStr: struct (hyper-parameters)
% OUTPUT
%   evaRslt: struct (evaluation result)

% add path for *.mexa64 files under ./mex
addpath('./mex');

% obtain basic variables
smplCntDtb = size(codeMatDtb, 2);
smplCntQry = size(codeMatQry, 2);

% remove invalid evaluation positions
paraStr.evaPosLst = paraStr.evaPosLst(paraStr.evaPosLst <= smplCntDtb);

% convert the -1/+1 binary codes to 0/1 binary codes
codeMatDtb = uint8((codeMatDtb + 1) / 2);
codeMatQry = uint8((codeMatQry + 1) / 2);

% convert the 0/1 binary code to 0 ~ (2 ^ n - 1) compact codes
codeMatDtb = mex_CvtHashToCompCode(codeMatDtb);
codeMatQry = mex_CvtHashToCompCode(codeMatQry);

% evaluate performance for each query
dataMatLnk = dataMatLnk + 1; % 0-based indexing to 1-based indexing
evaRslt.precScrLst = zeros(numel(paraStr.evaPosLst), smplCntQry);
evaRslt.reclScrLst = zeros(numel(paraStr.evaPosLst), smplCntQry);
evaRslt.meanAPLst = zeros(1, smplCntQry);
for smplIdxQry = 1 : smplCntQry
  % display the heart-beat message
  if mod(smplIdxQry, 10) == 0
    fprintf('[INFO] evaluating query #%d\n', smplIdxQry);
  end
  
  % compute the precision/recall@T and meanAP scores
  distLst = mex_CalcHammDist(codeMatQry(:, smplIdxQry), codeMatDtb);
  [precScrLst, reclScrLst, meanAP] = ...
      CalcPrecReclMap(distLst, dataMatLnk(:, smplIdxQry), paraStr.evaPosLst);
  evaRslt.precScrLst(:, smplIdxQry) = precScrLst;
  evaRslt.reclScrLst(:, smplIdxQry) = reclScrLst;
  evaRslt.meanAPLst(smplIdxQry) = meanAP;
end

% display the average precision/recall@T and meanAP scores
evaRslt.precScrAve = mean(evaRslt.precScrLst, 2);
evaRslt.reclScrAve = mean(evaRslt.reclScrLst, 2);
evaRslt.meanAPAve = mean(evaRslt.meanAPLst);
for evaPosIdx = 1 : numel(paraStr.evaPosLst)
  fprintf('[INFO] precis@%d = %f, recall@%d = %f\n', ...
      paraStr.evaPosLst(evaPosIdx), evaRslt.precScrAve(evaPosIdx), ...
      paraStr.evaPosLst(evaPosIdx), evaRslt.reclScrAve(evaPosIdx));
end
fprintf('[INFO] meanAP = %f\n', evaRslt.meanAPAve);

end
