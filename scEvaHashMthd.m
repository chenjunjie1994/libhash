close all; clearvars; clc;

% add path for *.m files under ./util
addpath('./util');

% specify the hashing method to be evaluated
kMthdName = 'ITQ';

%%% PREPARATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% initialize parameters for the specified hashing method
paraStr = eval(sprintf('CfgParaStr_%s();', kMthdName));

% enable diary output
system(sprintf('rm -rf %s', paraStr.logFilePath));
diary(paraStr.logFilePath);

% load dataset
[dataMatLrn, dataMatDtb, dataMatQry, dataMatLnk] = LoadDataSet(paraStr);

%%% METHOD EVALUATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% train a hashing model
tic;
fprintf('[INFO] training a hashing model\n');
if paraStr.trnWithLrnSet
  model = paraStr.trnFuncHndl(dataMatLrn, paraStr);
else
  model = paraStr.trnFuncHndl(dataMatDtb, paraStr);
end
fprintf('[INFO] training a hashing model - DONE (%.4f s)\n', toc);

% calculate binary codes for database and query samples
tic;
fprintf('[INFO] calculating binary codes\n');
codeMatDtb = model.hashFunc(dataMatDtb);
codeMatQry = model.hashFunc(dataMatQry);
fprintf('[INFO] calculating binary codes - DONE (%.4f s)\n', toc);

% evaluate binary codes generated by the hashing model
tic;
fprintf('[INFO] evaluating the hashing model\n');
evaRslt = CalcEvaRslt(dataMatLnk, codeMatDtb, codeMatQry, paraStr);
save(paraStr.rltFilePath, 'evaRslt');
fprintf('[INFO] evaluating the hashing model - DONE (%.4f s)\n', toc);

% disable diary output
diary off;
